/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-misused-promises */

import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { api } from "~/utils/api";


type SellItemForm = {
    name: string;
    description: string;
    price:string;
}
const SellAnItem: NextPage = () => {
    const createListing = api.listing.create.useMutation();
    const router = useRouter()
    const { register, handleSubmit } = useForm<SellItemForm>();
  const onSubmit = (formData: SellItemForm) => {

    createListing.mutateAsync({...formData,price:parseFloat(formData.price),}).then(()=>{
        router.push("/");});
};

  return (
    <>
      <Head>
        <title>Sell an Item</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-gray-500 flex min-h-screen flex-col items-center justify-center bg-gradient-to-b">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
        
        <h1>Sell An Item</h1>
        <form className="flex flex-col gap-2" onSubmit={handleSubmit(onSubmit)}>
            <div>
                
        <label htmlFor="name" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            Item name
            </label>
      <input className="bg-gray-50 border border-gray-300
       text-gray-900
       text-sm rounded-lg focus:ring-blue-500
       focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700
       dark:border-gray-600 dark:placeholder-gray-400
       dark:text-white dark:focus:ring-blue-500
       dark:focus:border-blue-500" {...register("name", { required: true})} />
       </div>



     <div>

      <label htmlFor="description" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            
            description
            </label>
      <textarea className="bg-gray-50 border border-gray-300
       text-gray-900
       text-sm rounded-lg focus:ring-blue-500
       focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700
       dark:border-gray-600 dark:placeholder-gray-400
       dark:text-white dark:focus:ring-blue-500
       dark:focus:border-blue-500"{...register("description", { required: true})} />
       </div>

      <div>
            <label htmlFor="price" className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
            
                Price
                </label>
      <input id="price" className="bg-gray-50 border border-gray-300
       text-gray-900
       text-sm rounded-lg focus:ring-blue-500
        focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700
         dark:border-gray-600 dark:placeholder-gray-400
          dark:text-white dark:focus:ring-blue-500
           dark:focus:border-blue-500" type="number" step="0.01"{...register("price", { required: true})} />
        </div>
      
      <button type="submit" className="text-white bg-blue-700 hover:bg-blue-800 
      focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 
      mr-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none 
      dark:focus:ring-blue-800">Create</button>


    </form>
        </div>
      </main>
    </>
  );
};

export default SellAnItem;
